{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["total","App","props","state","expense","table","handleChange","bind","handleSubmit","handleDelete","handleEdit","event","this","setState","target","value","preventDefault","parseFloat","index","splice","id","placeholder","onChange","class","onClick","map","item","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAIIA,G,MAAQ,GAsFGC,E,kDApFb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,QAAQ,GACRC,MAAM,IAER,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBATF,E,yDAWLI,GACXC,KAAKC,SAAS,CACVT,QAASO,EAAMG,OAAOC,MACtBV,MAAOO,KAAKT,MAAME,U,mCAGXM,GACXA,EAAMK,iBACHJ,KAAKT,MAAMC,UACZQ,KAAKC,SAAS,CACZT,QAAS,GACTC,MAAM,GAAD,mBAAMO,KAAKT,MAAME,OAAjB,CAAuBO,KAAKT,MAAMC,YAEzCJ,GAAOiB,WAAWL,KAAKT,MAAMC,Y,mCAIpBc,GACX,IAAMb,EAAQO,KAAKT,MAAME,MACnBD,EAAUC,EAAMc,OAAOD,EAAM,GACnCN,KAAKC,SAAS,CACZR,MAAOA,IAETL,GAAOiB,WAAWb,K,iCAETc,GACT,IAAMb,EAAQO,KAAKT,MAAME,MACnBD,EAAUC,EAAMc,OAAOD,EAAM,GACnCN,KAAKC,SAAS,CACZR,MAAOA,EACPD,QAASA,IAEXJ,GAAOiB,WAAWb,K,+BAGX,IAAD,OACN,OACE,yBAAKgB,GAAG,WACN,+CACA,2BAAOC,YAAa,gBAAiBN,MAAOH,KAAKT,MAAMC,QAASkB,SAAUV,KAAKN,eAFjF,WAIE,4BAAQiB,MAAM,SAASC,QAASZ,KAAKJ,cAArC,WAEA,+BACE,+BACE,4BACE,iCACA,uCACA,sCACA,sCAGJ,+BAEII,KAAKT,MAAME,MAAMoB,KAAI,SAACC,EAAKR,GACzB,OACE,wBAAIS,IAAKT,GACT,kCAAQA,EAAO,GACf,4BAAKQ,GACL,4BAAI,4BAAQH,MAAQ,8BAA8BC,QAAS,kBAAI,EAAKf,aAAaS,KAA7E,WACJ,4BAAI,4BAAQM,QAAU,kBAAI,EAAKd,WAAWQ,KAAtC,eAOd,sCAAYlB,Q,GA/EF4B,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e2fa2468.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types'\n\nvar total = 0;\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      expense:'',\n      table:[]\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n  }\n  handleChange(event){\n    this.setState({\n        expense: event.target.value,\n        table: this.state.table\n      })\n  }\n  handleSubmit(event){\n    event.preventDefault();\n    if(this.state.expense){\n      this.setState({\n        expense: '',\n        table: [...this.state.table,this.state.expense]\n      })\n      total+=parseFloat(this.state.expense);\n    }\n  }\n\n  handleDelete(index){\n    const table = this.state.table;\n    const expense = table.splice(index,1);\n    this.setState({\n      table: table\n    })\n    total-=parseFloat(expense);\n  }\n  handleEdit(index){\n    const table = this.state.table;\n    const expense = table.splice(index,1);\n    this.setState({\n      table: table,\n      expense: expense\n    })\n    total-=parseFloat(expense);\n    \n  }\n  render(){\n    return(\n      <div id=\"outside\"> \n        <h1>Expense Tracker</h1>\n        <input placeholder={\"Enter expense\"} value={this.state.expense} onChange={this.handleChange}></input>\n        &nbsp;&nbsp;\n        <button class=\"button\" onClick={this.handleSubmit}>Submit!</button>\n            \n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Expense</th>\n              <th>Delete</th>\n              <th>Edit</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              this.state.table.map((item,index)=>{\n                return(\n                  <tr key={index}>\n                  <td>No.{index +1}</td>\n                  <td>{item}</td>\n                  <td><button class = \"btn btn-primary mb1 bg-blue\" onClick={()=>this.handleDelete(index)}>Delete</button></td>\n                  <td><button onClick ={()=>this.handleEdit(index)}>Edit</button></td>\n                  </tr>\n                )\n              })\n            }\n          </tbody>\n        </table>\n        <h1>Total: {total}</h1>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}